package protocol

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"net"
	"strconv"
	"sync"
	"sync/atomic"
	"testing"
)

func ibm_handleAuthCapabilities(t *testing.T, conn *net.UDPConn, raddr net.Addr, bs []byte) {
	responseBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x81, 0x1c, 0x63, 0x20, 0x00, 0x38, 0x00, 0x01, 0x96, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0a}
	conn.WriteTo(responseBytes, raddr)
}
func ibm_handleOpenRequest(t *testing.T, conn *net.UDPConn, raddr net.Addr, bs []byte) {
	requestBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0xa3, 0xa2, 0xa0, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00}
	responseBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x04, 0x00, 0xa4, 0xa3, 0xa2, 0xa0, 0x00, 0x0a, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00}

	if !bytes.Equal(bs, requestBytes) {
		t.Error("excepted is", len(requestBytes), hex.EncodeToString(requestBytes))
		t.Error("actual   is", len(bs), hex.EncodeToString(bs))
	}
	conn.WriteTo(responseBytes, raddr)
}

func ibm_handleRAKP1(t *testing.T, conn *net.UDPConn, raddr net.Addr, bs []byte) {
	requestBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x03, 0xc9, 0x40, 0xa0, 0xed, 0xbe, 0x81, 0x8d, 0xcc, 0xbf, 0x8b, 0xb9, 0x2c, 0x48, 0xff, 0xbd, 0x40, 0x14, 0x00, 0x00, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44}
	responseBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0xa3, 0xa2, 0xa0, 0x11, 0xf1, 0x35, 0x6c, 0xa0, 0x04, 0xb3, 0xf3, 0xcc, 0x78, 0x4b, 0xf6, 0xb1, 0xc2, 0x49, 0xb8, 0xe1, 0xe9, 0xe1, 0x24, 0x9c, 0x08, 0x11, 0xe2, 0xa5, 0x00, 0x40, 0xf2, 0xe9, 0x21, 0x4f, 0x42, 0x84, 0x9f, 0xbe, 0x4c, 0xa5, 0x5d, 0x41, 0x30, 0xdf, 0xd9, 0x1a, 0x80, 0x40, 0x58, 0xa8, 0x5c, 0x4c, 0xb6, 0x1f, 0x3a}

	if !bytes.Equal(bs, requestBytes) {
		t.Error("excepted is", len(requestBytes), hex.EncodeToString(requestBytes))
		t.Error("actual   is", len(bs), hex.EncodeToString(bs))
	}

	conn.WriteTo(responseBytes, raddr)
}

func ibm_handleRAKP3(t *testing.T, conn *net.UDPConn, raddr net.Addr, bs []byte) {
	requestBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x03, 0xe5, 0x73, 0x81, 0xb7, 0x05, 0xe6, 0x3f, 0xf6, 0xfc, 0x90, 0x6d, 0x40, 0x49, 0x4c, 0x18, 0x65, 0xe5, 0xca, 0x47, 0x9d}
	responseBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0xa3, 0xa2, 0xa0, 0x48, 0xa3, 0x18, 0x44, 0x17, 0x36, 0xdc, 0x24, 0x2a, 0x3f, 0xc3, 0xe7}

	if !bytes.Equal(bs, requestBytes) {
		t.Error("excepted is", len(requestBytes), hex.EncodeToString(requestBytes))
		t.Error("actual   is", len(bs), hex.EncodeToString(bs))
	}

	conn.WriteTo(responseBytes, raddr)
}

func ibm_handleSetPrivilegeLevel(t *testing.T, conn *net.UDPConn, raddr net.Addr, bs []byte) {
	requestBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x00, 0x00, 0x0a, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x18, 0xc8, 0x81, 0x04, 0x3b, 0x04, 0x3c}
	responseBytes := []byte{0x06, 0x00, 0xff, 0x07, 0x06, 0x00, 0xa4, 0xa3, 0xa2, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x81, 0x1c, 0x63, 0x20, 0x04, 0x3b, 0x00, 0x04, 0x9d}
	if !bytes.Equal(bs, requestBytes) {
		t.Error("excepted is", len(requestBytes), hex.EncodeToString(requestBytes))
		t.Error("actual   is", len(bs), hex.EncodeToString(bs))
	}

	conn.WriteTo(responseBytes, raddr)
}

func TestOpenSessionIBM(t *testing.T) {
	conn, e := net.ListenUDP("udp", &net.UDPAddr{Port: 0})
	if nil != e {
		t.Error(e)
		return
	}

	var wait sync.WaitGroup
	var is_running int32 = 1
	go func() {
		count := 0
		defer wait.Done()
		bs := make([]byte, 1024)
		for 1 == atomic.LoadInt32(&is_running) {
			n, raddr, e := conn.ReadFrom(bs)
			if nil != e {
				fmt.Println(e)
				break
			}

			switch count {
			case 0:
				t.Log("handleAuthCapabilities")
				ibm_handleAuthCapabilities(t, conn, raddr, bs[:n])
			case 1:
				t.Log("handleOpenRequest")
				ibm_handleOpenRequest(t, conn, raddr, bs[:n])
			case 2:
				t.Log("handleRAKP1")
				ibm_handleRAKP1(t, conn, raddr, bs[:n])
			case 3:
				t.Log("handleRAKP3")
				ibm_handleRAKP3(t, conn, raddr, bs[:n])
			case 4:
				t.Log("handleSetPrivilegeLevel")
				ibm_handleSetPrivilegeLevel(t, conn, raddr, bs[:n])
			default:
				t.Error("unknow message")
			}
			count++
		}
	}()
	wait.Add(1)

	defer func() {
		atomic.StoreInt32(&is_running, 0)
		conn.Close()

		wait.Wait()
	}()

	_, sport, _ := net.SplitHostPort(conn.LocalAddr().String())
	port, _ := strconv.Atoi(sport)

	l := &lanPlus{
		lanBase: lanBase{conn_opt: &ConnectionOption{Hostname: "127.0.0.1",
			Port:      port,
			Username:  "USERID",
			Password:  "PASSW0RD",
			Interface: "lanplus"},
			sequence: 2,
		},
		//PrivLevel:                20,
		RoleUserOnlyLookup:       true,
		authenticationAlgorithm:  RAKPAlgorithmAuth_HMAC_SHA1,
		integrityAlgorithm:       RAKPAlgorithmIntegrity_None,
		confidentialityAlgorithm: RAKPAlgorithmEncryto_None,
	}

	copy(l.Authcode[:], []byte(l.lanBase.conn_opt.Password))
	copy(l.Username[:], []byte(l.lanBase.conn_opt.Username))
	l.UsernameLen = uint8(len(l.lanBase.conn_opt.Username))

	copy(l.LRand[:], []byte{201, 64, 160, 237, 190, 129, 141, 204, 191, 139, 185, 44, 72, 255, 189, 64})
	_session_id = 2695013284 - 1

	is_test = true
	if e := l.open(); nil != e {
		t.Error(e)
	}
}
